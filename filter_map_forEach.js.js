

//filter

const result = direcciones.filter(function (p) {
    return (p.pais !== '' && p.ciudad !== '' && p.direccion !== '') && (p.movil !== '' || p.fijo !== '')
        && (p.region !== '' || p.cp !== '')
})

let res;
let datas;


datas = [1,2,3,4]

// Will process elements TO THE LEFT (first 4, then 3, etc.)
res = data.reduce( (element, acc) => {
  return acc + element
},0)
console.log(res)

console.log('----------------------------------------------------');
console.log('reduceRight()');
console.log('----------------------------------------------------');


data = ['hello', 'how', 'are', 'you']

// Will process elements TO THE RIGHT (first 'hello', then 'how', etc.)
res = data.reduceRight( (element, acc) => {
  return acc + ' ' + element
},'')
console.log(res)


/*
map: find more than one
  arr.map(callback(currentValue[, index[, array]]))
  NEW array with elements generated by function
*/

let users = [
  { id:"23", name: "John", surname: "Smith", email: "" },
  { id:"56", name: "Emmy", surname: "Noether", email: "emmy@uni-goettingen.de" },
  { id:"12", name: "Maryam", surname: "Mirzakhani", email: "maryam@stanford.edu" },
]

res = users.map( user => user.email || "no email provided" )
console.log(res)

console.log('----------------------------------------------------');
console.log('forEach()');
console.log('----------------------------------------------------');

// It's like a loop
users.forEach( user => console.log(`processing user ${user.name}`))

// Acts over elements existing when called
let data = [0,1,2]
// So this is not an infinite loop
data.forEach( (element, _, array) => {
  array.push(element * 2)
})
console.log(data)